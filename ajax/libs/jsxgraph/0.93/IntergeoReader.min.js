JXG.IntergeoReader=new function(){this.board=null,this.objects={},this.readIntergeo=function(e,t){this.board=t,this.board.origin={},this.board.origin.usrCoords=[1,0,0],this.board.origin.scrCoords=[1,400,300],this.board.unitX=30,this.board.unitY=30,this.readElements(e.getElementsByTagName("elements")),this.readConstraints(e.getElementsByTagName("constraints")),this.cleanUp(),this.board.fullUpdate(),this.readDisplay(e.getElementsByTagName("display")),this.board.fullUpdate()},this.readElements=function(e){for(var t,t=0;e[0].childNodes.length>t;t++)(function(t){var n;n=e[0].childNodes[t],n.nodeType>1||("point"==n.nodeName?JXG.IntergeoReader.storePoint(n):"line"==n.nodeName||"line_segment"==n.nodeName||"ray"==n.nodeName||"vector"==n.nodeName?JXG.IntergeoReader.storeLine(n):"circle"==n.nodeName?JXG.IntergeoReader.storeConic(n):"conic"==n.nodeName?JXG.IntergeoReader.storeConic(n):"polygon"==n.nodeName||JXG.debug("Not implemented: "+n.nodeName+" "+n.getAttribute("id")))})(t)},this.addPointOld=function(e){for(var t,n=0,i=0,r=0,o=e.childNodes[n],a=[],s={strokeColor:"red",fillColor:"red",withLabel:!0},l=[];o.nodeType>1;)n++,o=e.childNodes[n];if(s.name=e.getAttribute("id"),"homogeneous_coordinates"==o.nodeName){for(i=0;o.childNodes.length>i;i++)if(1==o.childNodes[i].nodeType)if("double"==o.childNodes[i].nodeName)a.push(o.childNodes[i].firstChild.data);else{if("complex"!=o.childNodes[i].nodeName)return JXG.debug("Not implemented: "+o.childNodes[i].nodeName),void 0;for(r=0;o.childNodes[i].childNodes.length>r;r++)"double"==o.childNodes[i].childNodes[r].nodeName&&a.push(o.childNodes[i].childNodes[r].firstChild.data)}for(i=0;a.length>i;i++)a[i]=parseFloat(a[i]);if(3==a.length)l=[a[2],a[0],a[1]];else{if(!(6==a.length&&1e-10>Math.abs(a[1])&&1e-10>Math.abs(a[3])&&1e-10>Math.abs(a[5])))return JXG.debug("type not supported, yet"),void 0;l=[a[4],a[0],a[2]]}}else if("euclidean_coordinates"==o.nodeName){for(i=0;o.childNodes.length>i;i++)1==o.childNodes[i].nodeType&&a.push(o.childNodes[i].firstChild.data);for(i=0;a.length>i;i++)a[i]=parseFloat(a[i]);l=[a[0],a[1]]}else{if("polar_coordinates"!=o.nodeName)return JXG.debug("This coordinate type is not yet implemented: "+o.nodeName),void 0;for(i=0;o.childNodes.length>i;i++)1==o.childNodes[i].nodeType&&a.push(o.childNodes[i].firstChild.data);for(i=0;a.length>i;i++)a[i]=parseFloat(a[i]);l=[a[0]*Math.cos(a[1]),a[0]*Math.sin(a[1])]}t=this.board.create("point",l,s),this.objects[e.getAttribute("id")]=t},this.storePoint=function(e){for(var t=0,n=0,i=0,r=e.childNodes[t],o=[],a=[];r.nodeType>1;)t++,r=e.childNodes[t];if("homogeneous_coordinates"==r.nodeName){for(n=0;r.childNodes.length>n;n++)if(1==r.childNodes[n].nodeType)if("double"==r.childNodes[n].nodeName)o.push(r.childNodes[n].firstChild.data);else{if("complex"!=r.childNodes[n].nodeName)return JXG.debug("Not implemented: "+r.childNodes[n].nodeName),void 0;for(i=0;r.childNodes[n].childNodes.length>i;i++)"double"==r.childNodes[n].childNodes[i].nodeName&&o.push(r.childNodes[n].childNodes[i].firstChild.data)}for(n=0;o.length>n;n++)o[n]=parseFloat(o[n]);if(3==o.length)a=[o[2],o[0],o[1]];else{if(!(6==o.length&&1e-10>Math.abs(o[1])&&1e-10>Math.abs(o[3])&&1e-10>Math.abs(o[5])))return JXG.debug("type not supported, yet"),void 0;a=[o[4],o[0],o[2]]}}else if("euclidean_coordinates"==r.nodeName||"euclidian_coordinates"==r.nodeName){for(n=0;r.childNodes.length>n;n++)1==r.childNodes[n].nodeType&&o.push(r.childNodes[n].firstChild.data);for(n=0;o.length>n;n++)o[n]=parseFloat(o[n]);a=[o[0],o[1]]}else{if("polar_coordinates"!=r.nodeName)return JXG.debug("This coordinate type is not yet implemented: "+r.nodeName),void 0;for(n=0;r.childNodes.length>n;n++)1==r.childNodes[n].nodeType&&o.push(r.childNodes[n].firstChild.data);for(n=0;o.length>n;n++)o[n]=parseFloat(o[n]);a=[o[0]*Math.cos(o[1]),o[0]*Math.sin(o[1])]}this.objects[e.getAttribute("id")]={id:e.getAttribute("id"),coords:null},this.objects[e.getAttribute("id")].coords=a,this.objects[e.getAttribute("id")].id=e.getAttribute("id"),this.objects[e.getAttribute("id")].exists=!1,this.objects[e.getAttribute("id")].i2geoType="point"},this.storeLine=function(e){var t,n,i,r;for(this.objects[e.getAttribute("id")]={id:e.getAttribute("id"),coords:null},t=0,n=e.childNodes[t];n.nodeType>1;)t++,n=e.childNodes[t];if("homogeneous_coordinates"==n.nodeName){for(i=[],r=0;n.childNodes.length>r;r++)1==n.childNodes[r].nodeType&&"double"==n.childNodes[r].nodeName&&i.push(parseFloat(n.childNodes[r].firstChild.data));this.objects[e.getAttribute("id")].coords=i,this.objects[e.getAttribute("id")].id=e.getAttribute("id"),this.objects[e.getAttribute("id")].exists=!1,this.objects[e.getAttribute("id")].i2geoType="line"}},this.storeConic=function(e){var t,n,i,r;for(this.objects[e.getAttribute("id")]={id:e.getAttribute("id"),coords:null},t=0,i=e.childNodes[t];i.nodeType>1;)t++,i=e.childNodes[t];if("matrix"==i.nodeName){for(r=[],n=0;i.childNodes.length>n;n++)1==i.childNodes[n].nodeType&&"double"==i.childNodes[n].nodeName&&r.push(parseFloat(i.childNodes[n].firstChild.data));this.objects[e.getAttribute("id")].coords=r,this.objects[e.getAttribute("id")].id=e.getAttribute("id"),this.objects[e.getAttribute("id")].exists=!1,this.objects[e.getAttribute("id")].i2geoType="conic"}},this.readConstraints=function(e){var t,n;for(this.board.options.point.strokeColor="blue",this.board.options.point.fillColor="blue",t=0;e[0].childNodes.length>t;t++)(function(t){var i;i=e[0].childNodes[t],i.nodeType>1||("line_through_two_points"==i.nodeName?JXG.IntergeoReader.addLineThroughTwoPoints(i,!1):"ray_from_point_through_point"==i.nodeName?JXG.IntergeoReader.addLineThroughTwoPoints(i,!0):"line_through_point"==i.nodeName?JXG.IntergeoReader.addLineThroughPoint(i):"line_parallel_to_line_through_point"==i.nodeName?JXG.IntergeoReader.addLineParallelToLineThroughPoint(i,!1):"ray_from_point_and_vector"==i.nodeName?JXG.IntergeoReader.addLineParallelToLineThroughPoint(i,!0):"line_perpendicular_to_line_through_point"==i.nodeName?JXG.IntergeoReader.addLinePerpendicularToLineThroughPoint(i):"line_segment_by_points"==i.nodeName?JXG.IntergeoReader.addLineSegmentByTwoPoints(i):"vector_from_point_to_point"==i.nodeName?JXG.IntergeoReader.addVectorFromPointToPoint(i):"endpoints_of_line_segment"==i.nodeName?JXG.IntergeoReader.addEndpointsOfLineSegment(i):"free_point"==i.nodeName||("free_line"==i.nodeName?JXG.IntergeoReader.addFreeLine(i):"point_on_line"==i.nodeName?JXG.IntergeoReader.addPointOnLine(i):"point_on_line_segment"==i.nodeName?JXG.IntergeoReader.addPointOnLine(i):"point_on_circle"==i.nodeName?JXG.IntergeoReader.addPointOnCircle(i):"angular_bisector_of_three_points"==i.nodeName?JXG.IntergeoReader.addAngularBisectorOfThreePoints(i,!1):"angular_bisectors_of_two_lines"==i.nodeName?JXG.IntergeoReader.addAngularBisectorsOfTwoLines(i,!1):"line_angular_bisector_of_three_points"==i.nodeName?JXG.IntergeoReader.addAngularBisectorOfThreePoints(i,!0):"line_angular_bisectors_of_two_lines"==i.nodeName?JXG.IntergeoReader.addAngularBisectorsOfTwoLines(i,!0):"midpoint_of_two_points"==i.nodeName?JXG.IntergeoReader.addMidpointOfTwoPoints(i):"midpoint"==i.nodeName?JXG.IntergeoReader.addMidpointOfTwoPoints(i):"midpoint_of_line_segment"==i.nodeName||"midpoint_line_segment"==i.nodeName?JXG.IntergeoReader.addMidpointOfLineSegment(i):"point_intersection_of_two_lines"==i.nodeName?JXG.IntergeoReader.addPointIntersectionOfTwoLines(i):"locus_defined_by_point"==i.nodeName?JXG.IntergeoReader.addLocusDefinedByPoint(i):"locus_defined_by_point_on_line"==i.nodeName?JXG.IntergeoReader.addLocusDefinedByPointOnLine(i):"locus_defined_by_point_on_line_segment"==i.nodeName?JXG.IntergeoReader.addLocusDefinedByPointOnLine(i):"locus_defined_by_line_through_point"==i.nodeName?JXG.IntergeoReader.addLocusDefinedByLineThroughPoint(i):"locus_defined_by_point_on_circle"==i.nodeName?JXG.IntergeoReader.addLocusDefinedByPointOnCircle(i):"circle_by_three_points"==i.nodeName?JXG.IntergeoReader.addCircleByThreePoints(i):"circle_by_center_and_point"==i.nodeName?JXG.IntergeoReader.addCircleByCenterAndPoint(i):"center_of_circle"==i.nodeName?JXG.IntergeoReader.addCenterOfCircle(i):"intersection_points_of_two_circles"==i.nodeName?JXG.IntergeoReader.addIntersectionPointsOfTwoCircles(i):"intersection_points_of_circle_and_line"==i.nodeName?JXG.IntergeoReader.addIntersectionPointsOfCircleAndLine(i):"other_intersection_point_of_two_circles"==i.nodeName?JXG.IntergeoReader.addOtherIntersectionPointOfTwoCircles(i):"other_intersection_point_of_circle_and_line"==i.nodeName?JXG.IntergeoReader.addOtherIntersectionPointOfCircleAndLine(i):"circle_tangent_lines_by_point"==i.nodeName?JXG.IntergeoReader.addCircleTangentLinesByPoint(i):"polygon_by_vertices"==i.nodeName?JXG.IntergeoReader.addPolygonByVertices(i):(n=JXG.IntergeoReader.readParams(i),JXG.debug("readConstraints: not implemented: "+i.nodeName+": "+n[0]))))})(t)},this.setAttributes=function(e){e.setProperty({strokecolor:this.board.options.point.strokeColor,fillColor:this.board.options.point.fillColor})},this.readParams=function(e){var t,n=[];for(t=0;e.childNodes.length>t;t++)1==e.childNodes[t].nodeType&&n.push(e.childNodes[t].firstChild.data);return n},this.addPoint=function(e){return e.exists||(e.exists=!0,e=this.board.create("point",e.coords,{name:e.id}),e.setProperty({strokecolor:"red",fillColor:"red"})),e},this.addLine=function(e){var t,n,i=this.objects[e].coords;for(t=0;i.length>t;t++)i[t]=parseFloat(i[t]);n=this.board.create("line",[i[2],i[0],i[1]],{name:e,strokeColor:"black",withLabel:!0}),this.objects[e]=n},this.addConic=function(e){var t;return e.exists||(t=e.coords,e=this.board.create("conic",[t[0],t[4],t[8],t[1],t[5],t[2]],{name:e.id}),e.exists=!0),e},this.cleanUp=function(){var e;for(e in this.objects)0==this.objects[e].exists&&("point"==this.objects[e].i2geoType?this.addPoint(this.objects[e]):"line"==this.objects[e].i2geoType?this.addLine(this.objects[e]):"conic"==this.objects[e].i2geoType?this.addConic(this.objects[e]):JXG.debug("forgotten: "+this.objects[e].id+" of type "+this.objects[e].i2geoType))},this.addLineThroughTwoPoints=function(e,t){var n,i,r,o=JXG.IntergeoReader.readParams(e);n=this.addPoint(this.objects[o[1]]),i=this.addPoint(this.objects[o[2]]),r=this.board.create("line",[n.id,i.id],{name:o[0],withLabel:!0,straightFirst:!t,straightLast:!0}),this.objects[o[0]]=r,this.objects[o[0]].exists=!0},this.addLineThroughPoint=function(e){var t,n,i=JXG.IntergeoReader.readParams(e),r=this.objects[i[0]].coords,o=this.addPoint(this.objects[i[1]]);for(t=0;r.length>t;t++)r[t]=parseFloat(r[t]);n=this.board.create("line",[function(){return r[2]-r[0]*o.X()-r[1]*o.Y()-r[2]*o.Z()},r[0],r[1]],{name:i[0],strokeColor:"black",withLabel:!0}),this.objects[i[0]]=n,this.objects[i[0]].exists=!0},this.addLineParallelToLineThroughPoint=function(e,t){var n,i,r,o=JXG.IntergeoReader.readParams(e);n=this.addPoint(this.objects[o[1]]),i=this.addPoint(this.objects[o[2]]),r=this.board.create("parallel",[n.id,i.id],{name:o[0],withLabel:!0,straightFirst:!t,straightLast:!0}),this.objects[o[0]]=r,this.objects[o[0]].exists=!0},this.addLinePerpendicularToLineThroughPoint=function(e){var t,n,i,r=JXG.IntergeoReader.readParams(e);t=this.addPoint(this.objects[r[1]]),n=this.addPoint(this.objects[r[2]]),i=this.board.create("perpendicular",[t.id,n.id],{name:r[0],id:r[0],straightFirst:!0,straightLast:!0,point:{name:r[0]+"foot",id:r[0]+"foot"},withLabel:!0}),this.objects[r[0]]=i,this.objects[r[0]].exists=!0},this.addLineSegmentByTwoPoints=function(e){var t,n,i,r=JXG.IntergeoReader.readParams(e);t=this.addPoint(this.objects[r[1]]),n=this.addPoint(this.objects[r[2]]),i=this.board.create("line",[t.id,n.id],{name:r[0],straightFirst:!1,straightLast:!1,strokeColor:"black",withLabel:!0}),this.objects[r[0]]=i,this.objects[r[0]].exists=!0},this.addPointIntersectionOfTwoLines=function(e){var t=JXG.IntergeoReader.readParams(e),n=this.objects[t[1]],i=this.objects[t[2]];this.objects[t[0]]=this.board.create("intersection",[n,i,0],{name:t[0],id:t[0],withLabel:!0}),this.setAttributes(this.objects[t[0]]),this.objects[t[0]].exists=!0},this.addFreeLine=function(e){var t=JXG.IntergeoReader.readParams(e),n=this.objects[t[0]].coords[0],i=this.objects[t[0]].coords[1],r=this.objects[t[0]].coords[2],o=this.board.create("line",[r,n,i],{name:t[0],id:t[0],withLabel:!0});this.objects[t[0]]=o,this.objects[t[0]].exists=!0},this.addPointOnLine=function(e){var t,n=JXG.IntergeoReader.readParams(e),i=JXG.getReference(this.board,n[1]);t=this.board.create("glider",[0,0,i],{name:n[0],id:n[0],withLabel:!0}),this.objects[n[0]].exists=!0},this.addPointOnCircle=function(e){var t,n=JXG.IntergeoReader.readParams(e),i=JXG.getReference(this.board,n[1]);i.update(),t=this.board.create("glider",[this.objects[n[0]].coords[1],this.objects[n[0]].coords[2],i],{name:n[0],id:n[0],withLabel:!0}),this.objects[n[0]].exists=!0},this.addEndpointsOfLineSegment=function(e){var t=JXG.IntergeoReader.readParams(e),n=this.objects[t[2]],i=this.addPoint(this.objects[t[0]]),r=this.addPoint(this.objects[t[1]]);i.addConstraint([function(){return n.point1.Z()},function(){return n.point1.X()},function(){return n.point1.Y()}]),r.addConstraint([function(){return n.point2.Z()},function(){return n.point2.X()},function(){return n.point2.Y()}]),this.setAttributes(i),this.setAttributes(r)},this.addAngularBisectorOfThreePoints=function(e,t){var n,i,r,o,a=JXG.IntergeoReader.readParams(e);n=this.addPoint(this.objects[a[1]]),i=this.addPoint(this.objects[a[2]]),r=this.addPoint(this.objects[a[3]]),o=this.board.create("bisector",[n.id,i.id,r.id],{name:a[0],id:a[0],withLabel:!0,straightFirst:t,straightLast:!0,strokeColor:"#000000"}),this.objects[a[0]]=o,this.objects[a[0]].exists=!0},this.addMidpointOfTwoPoints=function(e){var t,n,i,r=JXG.IntergeoReader.readParams(e);t=this.addPoint(this.objects[r[1]]),n=this.addPoint(this.objects[r[2]]),i=this.board.create("midpoint",[t.id,n.id],{name:r[0]}),this.setAttributes(i),this.objects[r[0]].exists=!0},this.addMidpointOfLineSegment=function(e){var t=JXG.IntergeoReader.readParams(e),n=JXG.getReference(this.board,t[1]);el=this.board.create("midpoint",[n.point1,n.point2],{name:t[0]}),this.setAttributes(el),this.objects[t[0]].exists=!0},this.addCircleByThreePoints=function(e){var t,n,i=JXG.IntergeoReader.readParams(e),r=[];for(t=0;3>t;t++)r[t]=this.addPoint(this.objects[i[t+1]]);n=this.board.create("circumcircle",r,{name:i[0],id:i[0],point:{name:i[0]+"c",id:i[0]+"c"},withLabel:!0}),this.objects[i[0]].exists=!0},this.addCenterOfCircle=function(e){var t=JXG.IntergeoReader.readParams(e),n=JXG.getReference(this.board,t[1]),i=this.board.create("point",[function(){return n.center.X()},function(){return n.center.Y()}],{name:t[0],id:t[0],withLabel:!0});this.setAttributes(i),this.objects[t[0]].exists=!0},this.addCircleTangentLinesByPoint=function(e){var t,n,i,r,o,a=JXG.IntergeoReader.readParams(e),s=JXG.getReference(this.board,a[2]),l=this.addPoint(this.objects[a[3]]);t=this.board.create("line",[function(){return JXG.Math.matVecMult(s.quadraticform,l.coords.usrCoords)[0]},function(){return JXG.Math.matVecMult(s.quadraticform,l.coords.usrCoords)[1]},function(){return JXG.Math.matVecMult(s.quadraticform,l.coords.usrCoords)[2]}],{visible:!1}),n=this.board.create("intersection",[s,t,0],{visible:!1}),i=this.board.create("intersection",[s,t,1],{visible:!1}),r=this.board.create("tangent",[n,s]),o=this.board.create("tangent",[i,s]),this.objects[a[0]]=r,this.objects[a[1]]=o,this.objects[a[0]].exists=!0,this.objects[a[1]].exists=!0},this.addIntersectionPointsOfTwoCircles=function(e){var t,n,i=JXG.IntergeoReader.readParams(e),r=JXG.getReference(this.board,i[2]),o=JXG.getReference(this.board,i[3]);t=this.board.create("intersection",[r,o,0],{name:i[0],id:i[0],withLabel:!0}),n=this.board.create("intersection",[r,o,1],{name:i[1],id:i[1],withLabel:!0}),this.setAttributes(t),this.setAttributes(n),this.objects[i[0]].exists=!0,this.objects[i[1]].exists=!0},this.addIntersectionPointsOfCircleAndLine=function(e){var t,n,i=JXG.IntergeoReader.readParams(e),r=JXG.getReference(this.board,i[2]),o=JXG.getReference(this.board,i[3]);t=this.board.create("intersection",[r,o,0],{name:i[0],id:i[0],withLabel:!0}),n=this.board.create("intersection",[r,o,1],{name:i[1],id:i[1],withLabel:!0}),this.setAttributes(t),this.setAttributes(n),this.objects[i[0]].exists=!0,this.objects[i[1]].exists=!0},this.addCircleByCenterAndPoint=function(e){var t=JXG.IntergeoReader.readParams(e),n=this.addPoint(this.objects[t[1]]),i=this.addPoint(this.objects[t[2]]);el=this.board.create("circle",[n.id,i.id],{name:t[0],id:t[0],withLabel:!0}),this.objects[t[0]].exists=!0},this.addOtherIntersectionPointOfTwoCircles=function(e){var t,n=JXG.IntergeoReader.readParams(e),i=JXG.getReference(this.board,n[2]),r=JXG.getReference(this.board,n[3]),o=JXG.getReference(this.board,n[1]);t=this.board.create("otherintersection",[i,r,o],{name:n[0],id:n[0],withLabel:!0}),this.setAttributes(t),this.objects[n[0]].exists=!0},this.addOtherIntersectionPointOfCircleAndLine=function(e){this.addOtherIntersectionPointOfTwoCircles(e)},this.addAngularBisectorsOfTwoLines=function(e){var t,n=JXG.IntergeoReader.readParams(e),i=this.objects[n[2]],r=this.objects[n[3]];t=this.board.create("bisectorlines",[i,r],{line1:{name:n[0],id:n[0],straightFirst:!0,straightLast:!0},line2:{name:n[1],id:n[1],straightFirst:!0,straightLast:!0},withLabel:!0}),this.objects[n[0]].exists=!0,this.objects[n[1]].exists=!0},this.addPolygonByVertices=function(e){var t,n,i,r=[],o=[],a=JXG.IntergeoReader.readParams(e);for(t=0;e.childNodes.length>t;t++)if(1==e.childNodes[t].nodeType&&"list_of_vertices"==e.childNodes[t].nodeName){n=e.childNodes[t],r=JXG.IntergeoReader.readParams(n);break}for(t=0;r.length>t;t++)o.push(this.addPoint(this.objects[r[t]]));i=this.board.create("polygon",o,{name:a[0],id:a[0],withLabel:!0}),this.objects[a[0]].exists=!0},this.addVectorFromPointToPoint=function(e){var t,n,i=JXG.IntergeoReader.readParams(e);t=this.addPoint(this.objects[i[1]]),n=this.addPoint(this.objects[i[2]]),el=this.board.create("arrow",[t.id,n.id],{name:i[0]}),this.setAttributes(el),this.objects[i[0]].exists=!0},this.addLocusDefinedByPoint=function(e){var t=JXG.IntergeoReader.readParams(e),n=JXG.getReference(this.board,t[1]);n.setProperty({trace:!0}),this.objects[t[1]]=n,this.setAttributes(n)},this.addLocusDefinedByPointOnLine=function(e){var t=JXG.IntergeoReader.readParams(e),n=JXG.getReference(this.board,t[1]);n.setProperty({trace:!0}),this.objects[t[1]]=n,this.setAttributes(n)},this.addLocusDefinedByLineThroughPoint=function(e){var t=JXG.IntergeoReader.readParams(e),n=JXG.getReference(this.board,t[1]);n.setProperty({trace:!0}),this.objects[t[1]]=n,this.setAttributes(n)},this.addLocusDefinedByPointOnCircle=function(e){var t=JXG.IntergeoReader.readParams(e),n=JXG.getReference(this.board,t[1]);n.setProperty({trace:!0}),this.objects[t[1]]=n,this.setAttributes(n)},this.prepareString=function(e){var t,n=[];if(0!=e.indexOf("<")){for(t=0;e.length>t;t++)n[t]=JXG.Util.asciiCharCodeAt(e,t);e=new JXG.Util.Unzip(n).unzipFile("construction/intergeo.xml")}return e},this.readDisplay=function(e){var t;if(JXG.exists(e)&&JXG.isArray(e))for(t=0;e[0].childNodes.length>t;t++)(function(t){var n,i,r,o,a={};if(n=e[0].childNodes[t],!(n.nodeType>1))if("background-color"==n.nodeName)this.board.containerObj.style.backgroundColor=n.firstChild.data;else if("style"==n.nodeName){i=JXG.getReference(this.board,n.getAttribute("ref"));var s;for(s=0;n.childNodes.length>s;s++)1==n.childNodes[s].nodeType&&(r=n.childNodes[s].nodeName,o=n.childNodes[s].firstChild.data,"stroke"==r?r="strokeColor":"stroke-width"==r||"border-width"==r?r="strokeWidth":"fill"==r?r="fillColor":"fill-opacity"==r?r="fillOpacity":"border-opacity"==r?r="strokeOpacity":"point-size"==r?r="size":"label"==r?r="name":"point-style"==r&&(r="face","circle"==o?o="o":"cross"==o?o="+":"x-mark"==o?o="x":"square"==o?o="[]":"triangle"==o?o="triangleup":"point"==o?o="o":JXG.debug("Display: not implemented"+n.nodeName)),a[r]=o);i.setProperty(a)}else JXG.debug("Display: not implemented"+n.nodeName)})(t)}};